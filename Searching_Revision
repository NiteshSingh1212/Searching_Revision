#include<iostream>
#include<limits.h>
#include<vector>
#include<string>
using namespace std;
// int firstOcc(vector<int> v,int target){
//     int s=0,e=v.size()-1,m=s+(e-s)/2,ans=-1;
//     while(s<=e){
//         if(v[m]==target){
//             ans=m;
//             e=m-1;
//         }
//         else if(v[m]>target){
//             e=m-1;
//         }else{
//             s=m+1;
//         }
//     m=s+(e-s)/2;
//     }return ans;
// }
// int lastOcc(vector<int> v,int target){
//     int s=0,e=v.size()-1,m=s+(e-s)/2,ans=-1;
//     while(s<=e){
//         if(v[m]==target){
//             ans=m;
//             s=m+1;
//         }
//         else if(v[m]>target){
//             e=m-1;
//         }else{
//             s=m+1;
//         }
//     m=s+(e-s)/2;
//     }return ans;
// }
// void missingElement(vector<int> v){
//     int s=0,e=v.size()-1,m=s+(e-s)/2,ans=-1;
//     while(s<=e){
//         if(v[s]==s+1){
//             s++;
//         }
//         else{
//             cout<<s+1;
//            break;
//         }
// }
// }
// int mountArray(vector<int> v){
//     int s=0,e=v.size()-1,m=s+(e-s)/2;
//     while(s<e){
//         if(v[m]>v[m+1]){
//           e= m;
          
//         }
       
//         else{
//             s=m+1;
//         }
//     m=s+(e-s)/2;
//     }return s;
// 
// int pivotElement(vector<int> v){
//    int s=0,e=v.size()-1,m=s+(e-s)/2;
//    while(s<e){
// if(v[m]>v[m+1]){
//     return m;
// }
// if(v[m-1]>v[m]){
//     return m-1;
// }
// else if(v[s]>v[m+1]){
//     e=m-1;
// }
// else{
//     s=m;
// }m=s+(e-s)/2;
//    }return s;
// }
// int squareRoot(int n){
//     int s=0,e=n,m=s+(e-s)/2,ans=-1;
//     while(s<=e){
//         if(m*m==n){
//             return m;
//         }else if(m*m>n){
//             e=m-1;
//         }else{
//             ans=m;
//             s=m+1;
//         }m=s+(e-s)/2;
//     }return ans;
// }
// int divideSolve(int divident,int divisor){
//     int s=0,e=divident,m=s+(e-s)/2,ans=-1;
//     while(s<=e){
//         if(m*divisor==divident){
//             return m;
//         }else if(m*divisor>divident){
//             e=m-1;
//         }else{
//             ans=m;
//             s=m+1;
//         }m=s+(e-s)/2;
//     }return ans;
// }
// bool binarySearch2DArray(int arr[][3],int r,int c,int t){
//       int s=0,e=r*c-1,m=s+(e-s)/2,ele=arr[m/c][m%c];
//     while(s<=e){ 
//        if(ele==t) {
// return true;
//        } 
//        else if(ele>t){
//         e=m-1;
//        }
//        else{
//         s=m+1;
//        }
//        m=s+(e-s)/2;
// }
// return false;
// }
int main(){
vector<int> v{3,4,5,6,2,1};
// for(int i=0;i<v.size();i++){
// cout<<v[i]<<" ";
// }
//  int target=4;
// int a=firstOcc(v,target);
// int b=lastOcc(v,target);
// cout<<b-a+1;
//missingElement(v);
//cout<<mountArray(v);
// cout<<pivotElement(v);
//int n=38;
// cout<<squareRoot(n);
//cout<<divideSolve(250,10);
// int arr[3][3]={{10,2,3},{4,100,5},{6,7,1000}};
// cout<<binarySearch2DArray(arr,3,3,10);
}
